networks:
  net:

services:
  db:
    image: postgres:17.4
    # command: postgres -c 'max_connections=1000'  # Явный запуск
    environment:
      POSTGRES_DB: stats
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d stats"]
      interval: 5s
      timeout: 5s
      retries: 15
    restart: unless-stopped
    networks:
      - net

  backend:
    build: ./backend/hack
    volumes:
      - ./backend/hack:/app
      - ./static_volume:/app/static
    command: gunicorn --pythonpath /app hack.wsgi:application --bind 0.0.0.0:8000
    expose:
      - "8000"
    environment:
      DJANGO_SETTINGS_MODULE: hack.settings
      ALLOWED_HOSTS: "*"
      DATABASE_URL: postgres://postgres:123@db:5432/stats
      POSTGRES_NAME: stats
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
    depends_on:
      db:
        condition: service_healthy
    # restart: unless-stopped
    networks:
      - net

  frontend:
    build: ./frontend/front
    environment:
      - BACKEND_HOST=backend
    volumes:
      - ./frontend/front/dist:/usr/share/nginx/html:ro
    depends_on:
      - backend
    networks:
      - net

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./frontend/front/dist:/usr/share/nginx/html
      - static_volume:/usr/share/nginx/html/static
      - media_volume:/usr/share/nginx/html/media
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
      - frontend
    networks:
      - net

volumes:
  postgres_data:
  static_volume:
  media_volume:

  
